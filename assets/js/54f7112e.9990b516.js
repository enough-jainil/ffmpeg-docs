"use strict";(self.webpackChunkytdlp_docs=self.webpackChunkytdlp_docs||[]).push([[1768],{5354:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=i(4848),t=i(8453);const s={sidebar_position:3},l="Developing Plugins for yt-dlp",o={id:"Plugins/developing-plugins",title:"Developing Plugins for yt-dlp",description:"This guide covers the process of creating plugins for yt-dlp, allowing you to extend its functionality with custom extractors or post-processors.",source:"@site/docs/Plugins/developing-plugins.md",sourceDirName:"Plugins",slug:"/Plugins/developing-plugins",permalink:"/docs/Plugins/developing-plugins",draft:!1,unlisted:!1,editUrl:"https://github.com/enough-jainil/yt-dlp-doc/docs/Plugins/developing-plugins.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installing Plugins for yt-dlp",permalink:"/docs/Plugins/installing-plugins"},next:{title:"Embedding yt-dlp",permalink:"/docs/category/embedding-yt-dlp"}},d={},c=[{value:"Overview",id:"overview",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Setting Up the Development Environment",id:"setting-up-the-development-environment",level:3},{value:"Creating an Extractor Plugin",id:"creating-an-extractor-plugin",level:2},{value:"Creating a PostProcessor Plugin",id:"creating-a-postprocessor-plugin",level:2},{value:"Testing Your Plugin",id:"testing-your-plugin",level:2},{value:"Packaging Your Plugin",id:"packaging-your-plugin",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Submitting Your Plugin",id:"submitting-your-plugin",level:2},{value:"Maintaining Your Plugin",id:"maintaining-your-plugin",level:2},{value:"Advanced Topics",id:"advanced-topics",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"developing-plugins-for-yt-dlp",children:"Developing Plugins for yt-dlp"})}),"\n",(0,r.jsx)(n.p,{children:"This guide covers the process of creating plugins for yt-dlp, allowing you to extend its functionality with custom extractors or post-processors."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"yt-dlp plugins are Python modules that can add new features without modifying the core codebase. There are two main types of plugins:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Extractor Plugins: Add support for new websites"}),"\n",(0,r.jsx)(n.li,{children:"PostProcessor Plugins: Implement new post-download processing features"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,r.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Python 3.8 or later"}),"\n",(0,r.jsx)(n.li,{children:"Familiarity with yt-dlp's codebase"}),"\n",(0,r.jsx)(n.li,{children:"Understanding of the website's structure (for extractors) or desired post-processing (for post-processors)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"setting-up-the-development-environment",children:"Setting Up the Development Environment"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Fork and clone the ",(0,r.jsx)(n.a,{href:"https://github.com/yt-dlp/yt-dlp",children:"yt-dlp repository"})]}),"\n",(0,r.jsxs)(n.li,{children:["Set up a virtual environment:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python3 -m venv yt-dlp-dev\r\nsource yt-dlp-dev/bin/activate\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Install development dependencies:","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pip install -r requirements.txt\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"creating-an-extractor-plugin",children:"Creating an Extractor Plugin"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a new Python file in the ",(0,r.jsx)(n.code,{children:"yt_dlp/extractor/"})," directory, e.g., ",(0,r.jsx)(n.code,{children:"mysite.py"})]}),"\n",(0,r.jsxs)(n.li,{children:["Define your extractor class, inheriting from ",(0,r.jsx)(n.code,{children:"yt_dlp.extractor.common.InfoExtractor"})]}),"\n",(0,r.jsxs)(n.li,{children:["Implement the required methods, primarily ",(0,r.jsx)(n.code,{children:"_real_extract()"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from yt_dlp.extractor.common import InfoExtractor\r\n\r\nclass MySiteIE(InfoExtractor):\r\n    _VALID_URL = r'https?://(?:www\\.)?mysite\\.com/watch/(?P<id>[0-9]+)'\r\n\r\n    def _real_extract(self, url):\r\n        video_id = self._match_id(url)\r\n        webpage = self._download_webpage(url, video_id)\r\n\r\n        title = self._html_search_regex(r'<h1>(.+?)</h1>', webpage, 'title')\r\n\r\n        return {\r\n            'id': video_id,\r\n            'title': title,\r\n            'url': self._html_search_regex(r'videoUrl\\s*=\\s*\"(.+?)\"', webpage, 'video URL'),\r\n        }\n"})}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-postprocessor-plugin",children:"Creating a PostProcessor Plugin"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a new Python file in the ",(0,r.jsx)(n.code,{children:"yt_dlp/postprocessor/"})," directory, e.g., ",(0,r.jsx)(n.code,{children:"mypostprocessor.py"})]}),"\n",(0,r.jsxs)(n.li,{children:["Define your post-processor class, inheriting from ",(0,r.jsx)(n.code,{children:"yt_dlp.postprocessor.common.PostProcessor"})]}),"\n",(0,r.jsxs)(n.li,{children:["Implement the required methods, primarily ",(0,r.jsx)(n.code,{children:"run()"})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from yt_dlp.postprocessor.common import PostProcessor\r\n\r\nclass MyPostProcessor(PostProcessor):\r\n    def __init__(self, downloader=None, **kwargs):\r\n        super().__init__(downloader)\r\n        self._kwargs = kwargs\r\n\r\n    def run(self, info):\r\n        # Your post-processing logic here\r\n        return [], info\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing-your-plugin",children:"Testing Your Plugin"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["For extractors, use the ",(0,r.jsx)(n.code,{children:"test_download()"})," method in your test case"]}),"\n",(0,r.jsx)(n.li,{children:"For post-processors, create a test case that applies your post-processor to a download"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Example test for an extractor:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from yt_dlp.extractor.common import InfoExtractor\r\nfrom yt_dlp.utils import ExtractorError\r\n\r\nclass TestMySiteIE(InfoExtractor):\r\n    def test_download(self):\r\n        self._test_download('https://www.mysite.com/watch/12345', {'id': '12345', 'title': 'Test Video'})\n"})}),"\n",(0,r.jsx)(n.h2,{id:"packaging-your-plugin",children:"Packaging Your Plugin"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a ",(0,r.jsx)(n.code,{children:"setup.py"})," file for your plugin:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from setuptools import setup, find_packages\r\n\r\nsetup(\r\n    name='yt-dlp-mysite',\r\n    version='0.1.0',\r\n    packages=find_packages(),\r\n    install_requires=['yt-dlp'],\r\n    entry_points={\r\n        'yt_dlp.plugins': ['mysite = yt_dlp_mysite:MySiteIE'],\r\n    },\r\n)\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:["Create a ",(0,r.jsx)(n.code,{children:"README.md"})," file describing your plugin and its usage"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Follow yt-dlp's coding style and conventions"}),"\n",(0,r.jsx)(n.li,{children:"Document your code thoroughly"}),"\n",(0,r.jsx)(n.li,{children:"Handle errors gracefully and provide meaningful error messages"}),"\n",(0,r.jsx)(n.li,{children:"Respect websites' terms of service and implement rate limiting if necessary"}),"\n",(0,r.jsx)(n.li,{children:"Keep your plugin focused on a specific task or website"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"submitting-your-plugin",children:"Submitting Your Plugin"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"If it's a general-purpose plugin, consider submitting it to the main yt-dlp repository"}),"\n",(0,r.jsxs)(n.li,{children:["Otherwise, host it on GitHub and add the ",(0,r.jsx)(n.code,{children:"yt-dlp-plugins"})," topic"]}),"\n",(0,r.jsxs)(n.li,{children:["Update the ",(0,r.jsx)(n.a,{href:"https://github.com/yt-dlp/yt-dlp/wiki/Plugins",children:"yt-dlp wiki"})," with information about your plugin"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"maintaining-your-plugin",children:"Maintaining Your Plugin"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Keep your plugin updated with changes in yt-dlp's core"}),"\n",(0,r.jsx)(n.li,{children:"Respond to bug reports and feature requests from users"}),"\n",(0,r.jsx)(n.li,{children:"Regularly test your plugin against the target website to ensure it still works"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"advanced-topics",children:"Advanced Topics"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implementing support for subtitles, thumbnails, and other metadata"}),"\n",(0,r.jsx)(n.li,{children:"Handling authentication for sites that require login"}),"\n",(0,r.jsx)(n.li,{children:"Creating plugins that work with multiple related websites"}),"\n",(0,r.jsx)(n.li,{children:"Optimizing performance for large downloads or playlists"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"By developing plugins for yt-dlp, you can contribute to the community and extend the tool's capabilities to meet specific needs. Remember to always respect copyright and the terms of service of the websites you're working with."})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var r=i(6540);const t={},s=r.createContext(t);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);